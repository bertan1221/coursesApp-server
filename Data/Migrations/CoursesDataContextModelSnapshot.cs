// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(CoursesDataContext))]
    partial class CoursesDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cutting trees, the ins and outs"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CSS and you - a love story"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Baking mud cakes using actual mud"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Christmas eve - myth or reality?"
                        },
                        new
                        {
                            Id = 5,
                            Name = "LEGO colors through time"
                        });
                });

            modelBuilder.Entity("Entities.CourseApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CompanyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseDateId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseDateId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseApplications");
                });

            modelBuilder.Entity("Entities.CourseApplicationParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CourseApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseApplicationId");

                    b.ToTable("CourseApplicationParticipants");
                });

            modelBuilder.Entity("Entities.CourseDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("AvailiabilityDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseDates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailiabilityDate = new DateTime(2017, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseId = 1
                        },
                        new
                        {
                            Id = 2,
                            AvailiabilityDate = new DateTime(2017, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseId = 1
                        },
                        new
                        {
                            Id = 3,
                            AvailiabilityDate = new DateTime(2017, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseId = 2
                        },
                        new
                        {
                            Id = 4,
                            AvailiabilityDate = new DateTime(2017, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseId = 2
                        },
                        new
                        {
                            Id = 5,
                            AvailiabilityDate = new DateTime(2017, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseId = 2
                        },
                        new
                        {
                            Id = 6,
                            AvailiabilityDate = new DateTime(2017, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseId = 3
                        },
                        new
                        {
                            Id = 7,
                            AvailiabilityDate = new DateTime(2018, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseId = 3
                        },
                        new
                        {
                            Id = 8,
                            AvailiabilityDate = new DateTime(2017, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseId = 3
                        },
                        new
                        {
                            Id = 9,
                            AvailiabilityDate = new DateTime(2017, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseId = 4
                        },
                        new
                        {
                            Id = 11,
                            AvailiabilityDate = new DateTime(2018, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseId = 4
                        },
                        new
                        {
                            Id = 12,
                            AvailiabilityDate = new DateTime(2019, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseId = 4
                        },
                        new
                        {
                            Id = 13,
                            AvailiabilityDate = new DateTime(2017, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CourseId = 5
                        });
                });

            modelBuilder.Entity("Entities.CourseApplication", b =>
                {
                    b.HasOne("Entities.CourseDate", "CourseDate")
                        .WithMany()
                        .HasForeignKey("CourseDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Course", "Course")
                        .WithMany("CourseApplications")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CourseDate");
                });

            modelBuilder.Entity("Entities.CourseApplicationParticipant", b =>
                {
                    b.HasOne("Entities.CourseApplication", "CourseApplication")
                        .WithMany("CourseApplicationParticipants")
                        .HasForeignKey("CourseApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseApplication");
                });

            modelBuilder.Entity("Entities.CourseDate", b =>
                {
                    b.HasOne("Entities.Course", "Course")
                        .WithMany("CourseDates")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Entities.Course", b =>
                {
                    b.Navigation("CourseApplications");

                    b.Navigation("CourseDates");
                });

            modelBuilder.Entity("Entities.CourseApplication", b =>
                {
                    b.Navigation("CourseApplicationParticipants");
                });
#pragma warning restore 612, 618
        }
    }
}
